{"version":3,"sources":["logo.svg","components/ListItems.js","containers/update.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItems","props","items","console","log","listitems","map","item","className","key","text","icon","onClick","deleteItem","library","add","faTrash","update","state","currentItem","handleInput","event","setState","target","value","Date","now","addItem","preventDefault","newItem","updatedItems","filteredItems","filter","bind","id","onSubmit","this","type","placeholder","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,gOC2B5BC,EAvBC,SAACC,GACjB,IAAMC,EAAQD,EAAMC,MACpBC,QAAQC,IAAIF,GACZ,IAAMG,EAAYH,EAAMI,KAAI,SAAAC,GACxB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAEnC,2BAAIF,EAAKG,KAAK,8BACV,kBAAC,IAAD,CAAiBF,UAAU,UAC3BG,KAAK,QACLC,QAAU,kBAAIX,EAAMY,WAAWN,EAAKE,cAO5C,OACI,6BACKJ,I,eChBbS,IAAQC,IAAIC,K,IA2EGC,E,kDAxEP,WAAYhB,GAAQ,IAAD,8BACf,cAAMA,IAOdiB,MAAQ,CACJhB,MAAO,GACPiB,YAAc,CACVT,KAAO,GACPD,IAAI,KAZW,EAgBvBW,YAAY,SAACC,GACT,EAAKC,SAAS,CACVH,YAAY,CACRT,KAAKW,EAAME,OAAOC,MAClBf,IAAIgB,KAAKC,UApBE,EAyBvBC,QAAQ,SAACN,GACLA,EAAMO,iBACN,IAAMC,EAAU,EAAKX,MAAMC,YAE3B,GAAkB,KAAfU,EAAQnB,KAAU,CACjB,IAAMoB,EAAY,sBAAO,EAAKZ,MAAMhB,OAAlB,CAAwB2B,IAC1C,EAAKP,SAAS,CACVpB,MAAQ4B,EACRX,YAAc,CACVT,KAAO,GACPD,IAAI,QAnCG,EAyCvBI,WAAa,SAACJ,GACV,IAAMsB,EAAgB,EAAKb,MAAMhB,MAAM8B,QAAO,SAAAzB,GAAI,OAC9CA,EAAKE,MAAMA,KACX,EAAKa,SAAS,CACVpB,MAAM6B,KA1CV,EAAKJ,QAAQ,EAAKA,QAAQM,KAAb,gBAHE,E,qDAqDnB,OACI,6BAEA,gCACD,0BAAMC,GAAG,aAAaC,SAAUC,KAAKT,SACjC,2BAAOU,KAAK,OAAOC,YAAY,aAC/Bd,MAAOY,KAAKlB,MAAMC,YAAYT,KAC9B6B,SAAUH,KAAKhB,YAAYa,KAAKG,QAChC,4BAAQC,KAAK,UAAb,SAGJ,kBAAC,EAAD,CAAUnC,MAASkC,KAAKlB,MAAMhB,MAC9BW,WAAcuB,KAAKvB,WAAWoB,KAAKG,a,GAlEzBI,aCQNC,MAXf,WACE,OACE,6BACA,wBAAIjC,UAAU,UAAd,cACA,yBAAKA,UAAU,OACb,kBAAC,EAAD,SCEckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.f106dfda.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './ListItems.css'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\n\nconst ListItems=(props)=> {\nconst items = props.items;\nconsole.log(items);\nconst listitems = items.map(item =>{\n    return <div className=\"list\" key={item.key}>\n        \n        <p>{item.text}<span>\n            <FontAwesomeIcon className=\"faicons\" \n            icon='trash'\n            onClick={ ()=>props.deleteItem(item.key)}/>\n        </span></p>\n        \n    </div>\n    \n})\n\n    return (\n        <div>\n            {listitems}\n        </div>\n    )\n}\n\nexport default ListItems\n","import React,{Component} from 'react'\nimport './update.css'\nimport ListItem from '../components/ListItems'\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash);  \n\nclass update extends Component {\n        constructor(props) {\n            super(props)\n        \n            this.addItem=this.addItem.bind(this);\n        }\n        \n    \n\n    state = {\n        items :[],\n        currentItem : {\n            text : '',\n            key:''\n        }\n    }\n\n    handleInput=(event)=>{\n        this.setState({\n            currentItem:{\n                text:event.target.value,\n                key:Date.now()\n            }\n        })\n    }\n\n    addItem=(event)=>{\n        event.preventDefault();\n        const newItem = this.state.currentItem;\n        \n        if(newItem.text!==\"\"){\n            const updatedItems = [...this.state.items,newItem];\n            this.setState({\n                items : updatedItems,\n                currentItem : {\n                    text : '',\n                    key:''\n                }\n            })\n        }\n    }\n\n    deleteItem = (key)=>{\n        const filteredItems = this.state.items.filter(item => \n            item.key!==key);\n            this.setState({\n                items:filteredItems\n            })\n    }\n    \n    \n\n    render() {\n        \n        return (\n            <div>\n                \n            <header>\n           <form id=\"to-do-form\" onSubmit={this.addItem}>\n               <input type=\"text\" placeholder=\"Enter Text\" \n               value={this.state.currentItem.text}\n               onChange={this.handleInput.bind(this)}></input>\n               <button type=\"submit\">Add</button>\n           </form>\n           </header>\n           <ListItem items = {this.state.items}\n           deleteItem = {this.deleteItem.bind(this)}></ListItem>\n           </div>\n        )\n    }\n    \n}\n\nexport default update\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Updated from './containers/update'\n\nfunction App() {\n  return (\n    <div>\n    <h2 className=\"header\">To Do List</h2>\n    <div className=\"App\">\n      <Updated/>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}